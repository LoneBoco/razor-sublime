%YAML 1.2
---
name: Razor C#
scope: source.razor.engine
version: 2
hidden: true

variables:

  unicode_char: '(?:\\u\h{4}|\\U\h{8})'
  start_char: '(?:{{unicode_char}}|[_\p{L}])'
  other_char: '(?:{{unicode_char}}|[_0-9\p{L}])'
  name_normal: '{{start_char}}{{other_char}}*\b'

  razor_rendermodes: '(InteractiveServer|InteractiveWebAssembly|InteractiveAuto)'
  razor_keywords_expression_block: '(?xi: if | switch | for | foreach | while | do | try | lock)'

#############################

contexts:

  main:
    - match: .
      pop: 1

  # Pop at the end of the line.
  end-of-line:
    - match: $\n?
      pop: 1

  # Insert a namespace.
  cs-namespace:
    - match: '(?=\S)'
      pop: 1
      embed: scope:embed.source.cs.razor#using_namespace
      escape: (?=\s|$\n?)

  # Insert an interface.
  cs-interface:
    - match: '{{name_normal}}'
      scope: entity.name.interface.cs
      pop: 1

  # Insert a variable.
  cs-variable:
    - match: '(?=\S)'
      pop: 1
      embed: scope:embed.source.cs.razor#var_declaration_explicit
      escape: (?=\s|$\n?)

  # Inserts a type.
  cs-type:
    - match: '(?=\S)'
      pop: 1
      embed: scope:embed.source.cs.razor#type_no_space
      escape: (?=\s|$\n?)
  cs-type-constraint:
    - match: '(?=\S)'
      pop: 1
      embed: scope:embed.source.cs.razor#razor_type_with_constraint
      escape: $\n?

  # Insert a code block.
  cs-block:
    - match: '\{'
      scope: keyword.other.block.razor punctuation.block.begin.razor
      set: scope:embed.source.cs.razor#code_block_in

  keyword:
    - include: component-directive
    - include: block
    - include: general-directive
    - include: mvc-directive

  block:
    - match: '\b(using)\s*(\()'
      captures:
        1: keyword.control.using.cs
        2: meta.group.cs punctuation.section.group.begin.cs
      set: [scope:embed.source.cs.razor#using_block, scope:embed.source.cs.razor#line_of_code]

    - match: '\b(?={{razor_keywords_expression_block}})\b'
      scope: keyword.declaration.expression.razor
      set: scope:embed.source.cs.razor#line_of_code

    - match: '\b(functions|code)\b'
      scope: keyword.declaration.code.block.razor
      set: cs-block

    - match: '(?=\{)'
      set: cs-block

    - match: '\('
      scope: keyword.other.inline.begin.razor
      set: scope:embed.source.cs.razor#razor_expression_in

  general-directive:
    - match: '\b(attribute)\b\s+'
      scope: keyword.declaration.attribute.razor
      pop: 1
      embed: scope:embed.source.cs.razor#attribute
      escape: \]
      escape_captures:
        0: punctuation.definition.annotation.end.cs

    - match: '\b(implements)\b\s+'
      scope: keyword.declaration.implements.razor
      set: cs-type

    - match: '\b(inherits)\b\s+'
      scope: keyword.declaration.inherits.razor
      set: cs-variable

    - match: '\b(inject)\b\s+'
      scope: keyword.declaration.inject.razor
      set: [cs-variable, cs-interface]

    - match: '\b(namespace)\b\s+'
      scope: keyword.declaration.namespace.razor
      pop: 1
      embed: scope:embed.source.cs.razor#namespace_declaration_name
      escape: (?=\s|$\n?)

    - match: '\b(page)\b\s+'
      scope: keyword.declaration.page.razor
      set:
        - include: scope:embed.source.cs.razor#strings
        - match: $\n?
          pop: 1

    - match: '\b(using)\b\s+'
      scope: keyword.declaration.using.razor
      set: cs-namespace

  mvc-directive:
    - match: '\b(addTagHelper|removeTagHelper)\b\s+'
      scope: keyword.declaration.taghelper.razor
      set:
        - include: end-of-line
        - match: '\*'
          scope: constant.other.wildcard.asterisk.razor
        - match: '(,)\s*'
          scope: punctuation.definition.separator.fqn
          set:
            - include: end-of-line
            - match: '(?=\S)'
              set: cs-namespace
        - match: '(?=\S)'
          embed: scope:embed.source.cs.razor#var_declaration_explicit
          escape: (?=\*|,|\s|$\n?)

    - match: '\b(tagHelperPrefix)\b\s+'
      scope: keyword.declaration.taghelper.razor
      set:
        - match: .+
          scope: entity.name.tag.prefix.razor
        - include: end-of-line

    - match: '\b(model)\b\s+'
      scope: keyword.declaration.model.razor
      set: cs-variable

    - match: '\b(section)\b\s+({{name_normal}})'
      captures:
        1: keyword.declaration.section.razor
        2: meta.section meta.toc-list variable.other.section.razor
      set:
        - match: '\{'
          scope: keyword.other.block.razor punctuation.block.begin.razor
          set: scope:source.razor#razor-section-block

  component-directive:
    - match: '\b(preservewhitespace)\b\s*(\btrue\b|\bfalse\b)?'
      captures:
        1: keyword.declaration.preservewhitespace.razor
        2: constant.language.cs
      pop: 1

    - match: '\b(layout)\b\s+'
      scope: keyword.declaration.layout.razor
      set: cs-type

    - match: '\b(typeparam)\b\s'
      scope: keyword.declaration.typeparam.razor
      set: cs-type-constraint

    # Standalone attributes
    - match: '\b(on{{name_normal}})(:)(preventDefault|stopPropagation)\b'
      captures:
        1: keyword.declaration.attribute-bind.razor
        2: punctuation.separator.event.html
        3: entity.other.attribute-name.html
      pop: 1

    # Attribute data bindings that take C# expressions.
    - match: '\b(attributes|bind|bind:culture|on{{name_normal}}|bind-{{name_normal}}|key|ref)\b\s*(=)'
      captures:
        0: meta.attribute-with-value.style.html
        1: keyword.declaration.attribute-bind.razor
        2: punctuation.separator.key-value.html
      set:
        - match: \'
          scope: string.quoted.single.html punctuation.definition.string.begin.html
          set: scope:embed.source.cs.razor#razor_single_quote_line_of_code_in
        - match: \"
          scope: string.quoted.double.html punctuation.definition.string.begin.html
          set:  scope:embed.source.cs.razor#razor_double_quote_line_of_code_in

    # Attribute data bindings that are just normal HTML strings.
    - match: '\b(formname)\b'
      captures:
        0: meta.attribute-with-value.style.html
        1: keyword.declaration.attribute-bind.razor
      set: scope:source.razor#tag-generic-attribute-assignment

    # Rendermode that can be set on the whole component, or on individual objects.
    - match: '\b(rendermode)\b'
      scope: keyword.declaration.rendermode.razor
      set:
        - match: \s+
        - match: \=
          scope: punctuation.separator.key-value.html
        - match: '(\''){{razor_rendermodes}}(\'')'
          captures:
            0: string.quoted.double.html
            1: punctuation.definition.string.begin.html
            2: constant.language.rendermode.razor
            3: punctuation.definition.string.end.html
          pop: 1
        - match: '"{{razor_rendermodes}}"'
          captures:
            0: string.quoted.double.html
            1: punctuation.definition.string.begin.html
            2: constant.language.rendermode.razor
            3: punctuation.definition.string.end.html
          pop: 1
        - match: '{{razor_rendermodes}}'
          scope: constant.language.rendermode.razor
          pop: 1
