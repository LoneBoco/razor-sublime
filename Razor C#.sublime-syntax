%YAML 1.2
---

name: Razor C#
file_extensions: cshtml
scope: source.razor text.html.basic
version: 2

variables:
  unicode_char: '(?:\\u\h{4}|\\U\h{8})'
  start_char: '(?:{{unicode_char}}|[_\p{L}])'
  other_char: '(?:{{unicode_char}}|[_0-9\p{L}])'
  name: '{{start_char}}{{other_char}}*\b'

contexts:
  prototype:
    - include: comments

  comments:
    # E-mail addresses have the @ symbol but don't activate code.
    - match: '[\+-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*'
      scope: meta.email
    # Match an escaped @.
    - match: '@@'
      scope: constant.character.escape
    # Attempt to fix the scopes so toggle comment works.
    # - match: '^\s*(?=@\*)'
      # scope: meta.embedded.html
    # Match the start of our comment.
    - match: '@\*'
      scope: punctuation.definition.comment.begin.razor
      push:
        # We push meta.embedded.html so toggle comment works everywhere.
        - meta_scope: meta.embedded.html comment.block.razor
        - match: '\*@'
          scope: punctuation.definition.comment.end.razor
          set:
            # Fix the scopes so toggle comment works.
            - match: '\n'
              scope: meta.embedded.html
              pop: true
            - match: '.'
              pop: true
    - match: '\*@'
      scope: invalid.illegal.stray-comment-end.razor

  # Used to identify embedded HTML content inside C# source.
  html:
    - include: comments
    - include: text
    - match: '@:'
      scope: entity.name.tag.razor punctuation.section.embedded.begin
      push: html_line
      with_prototype:
        - include: razor
    - match: '\s*(?=<)'
      push: html_line
      with_prototype:
        - include: razor

  html_line:
    - meta_content_scope: meta.embedded.html
    - clear_scopes: 1
    - match: '^'
      pop: true
    - include: scope:text.html.basic

  # <text> block.
  text:
    - match: '\<text\>'
      scope: keyword.other.text.razor.begin
      set:
        - clear_scopes: 2
        - meta_scope: meta.embedded.html
        - match: '<\/text>'
          scope: keyword.other.text.razor.end
          pop: true
        - include: main

  main:
    - include: razor
    - include: scope:text.html.basic

  razor:
    - include: text
    - include: razor_block
    - include: flow_control
    - include: inline_context

  razor_block:
    # @model
    - match: '\B(@model)\b\s+'
      captures:
        1: keyword.other.model.razor
      push:
        - match: ({{name}})(\.)
          captures:
            1: variable.other.razor
            2: punctuation.accessor.dot.razor
        - match: ({{name}})
          scope: variable.other.type.razor support.type.razor
        - match: \s
          pop: true

    # @section block.
    - match: '\B(@section)\b\s+({{name}})'
      captures:
        1: keyword.other.section.razor
        2: meta.section meta.toc-list
      push:
        - match: \s*
        - match: '\{'
          scope: keyword.other.section.razor punctuation.section.block.begin
          set:
            - match: '\}'
              scope: keyword.other.section.razor punctuation.section.block.end
              pop: true
            - include: main

    # @implements.
    - match: \B(@implements)\b\s+({{name}})
      captures:
        1: keyword.other.implements.razor
        2: entity.name.interface.cs
      push:
        - match: '$'
          pop: true
        - match: '<'
          scope: meta.generic.cs punctuation.definition.generic.begin.cs
          push: scope:source.cs#type_argument

    # @inherits.
    - match: \B(@inherits)\b\s+({{name}})
      captures:
        1: keyword.other.inherits.razor
        2: entity.name.class.cs
      push:
        - match: '$'
          pop: true
        - match: '<'
          scope: meta.generic.cs punctuation.definition.generic.begin.cs
          push: scope:source.cs#type_argument

    # @attribute
    - match: \B(@attribute)\b\s+\[({{name}})\]
      captures:
        1: keyword.other.attribute.razor
        2: entity.name.attribute.cs

    # @preservewhitespace
    - match: \B(@preservewhitespace)\b\s+\b(true|false)\b
      captures:
        1: keyword.other.preservewhitespace.razor
        2: constant.language.cs

    # @functions code block.
    - match: \B@functions\b\s*(\{)
      captures:
        0: keyword.other.functions.razor
        1: punctuation.section.block.begin
      push:
        - meta_content_scope: source.cs.embedded.razor
        - match: '\}'
          scope: keyword.other.codeblock.razor punctuation.section.block.end
          pop: true
        - include: scope:source.cs
          apply_prototype: true
      with_prototype:
        - include: html

    # namespace
    - match: \B(@namespace)\b\s+
      captures:
        1: keyword.other.namespace.razor
      push:
        - meta_scope: meta.namespace.cs
        - match: '(?={{name}})'
          push:
            - meta_content_scope: entity.name.namespace.cs
            - match: '{{name}}'
            - match: \.
              scope: punctuation.separator.namespace.cs
            - match: ''
              pop: true
        - match: (?=\S)
          pop: true

    # @{} code block.
    - match: '\B@(\{)'
      captures:
        0: keyword.other.codeblock.razor
        1: punctuation.section.block.begin
      push:
        - meta_content_scope: source.cs.embedded.razor
        - match: '\}'
          scope: keyword.other.codeblock.razor punctuation.section.block.end
          pop: true
        - include: scope:source.cs
          apply_prototype: true
      with_prototype:
        - include: html

  flow_control:
    # @if block.
    - match: '\B@(if)\b'
      scope: keyword.other.codeblock.razor
      captures:
        1: keyword.control.conditional.if.razor
      push: [scope:source.cs#else_block, razor_if_block, scope:source.cs#if_condition]
      with_prototype:
        - include: html

    # @switch block.
    - match: \B@(switch)\b
      scope: keyword.other.switch.razor
      captures:
        1: keyword.control.conditional.switch.razor
      push: [razor_switch_block, scope:source.cs#if_condition]
      with_prototype:
        - include: html

    # @for block.
    - match: '\B(@(for))\s*(\()'
      captures:
        1: keyword.other.for.razor
        2: keyword.control.loop.for.razor
        3: punctuation.definition.expression.loop.begin.razor
      push: [razor_for_block, scope:source.cs#line_of_code_in, scope:source.cs#line_of_code_in, scope:source.cs#for_var_assignment, scope:source.cs#var_declaration]
      with_prototype:
        - include: html

    # @foreach block.
    - match: '\B(@(foreach))\s*(\()'
      captures:
        1: keyword.other.foreach.razor
        2: keyword.control.loop.foreach.razor
        3: punctuation.definition.expression.loop.begin.razor
      push: [razor_for_block, scope:source.cs#foreach_var_assignment, scope:source.cs#var_declaration]
      with_prototype:
        - include: html

    # @try block.
    - match: \B@(try)\b
      scope: keyword.other.try.razor
      captures:
        1: keyword.control.trycatch.try.razor
      push: [razor_finally_block, razor_catch_expr, razor_try_block]

    # @using blocks.
    - match: '\B(@(using))\s+{{name}}\s*(=)\s*'
      captures:
        1: keyword.other.using.razor
        2: keyword.control.import.razor
        3: entity.name.type.razor
        4: storage.modifier.namespace.as.razor
      push: scope:source.cs#using_namespace
    - match: '\B(@(using))\s+(static\b)?\s*({{name}})'
      captures:
        1: keyword.other.using.razor
        2: keyword.control.import.razor
        3: storage.modifier.namespace.razor
        4: variable.namespace.razor
      push: scope:source.cs#using_namespace
    - match: '\B(@(using))\s*(\()'
      captures:
        1: keyword.other.using.razor
        2: keyword.control.trycatch.using.razor
        3: punctuation.definition.expression.trycatch.using.begin.razor
      push: [razor_using_block, scope:source.cs#line_of_code]
      with_prototype:
        - include: html

    # @do block.
    - match: \B@(do)\b
      scope: keyword.other.do.razor
      captures:
        1: keyword.control.loop.do.razor
      push: [scope:source.cs#do_condition, razor_while_block]
      with_prototype:
        - include: html

    # @while block.
    - match: \B@(while)\b
      scope: keyword.other.while.razor
      captures:
        1: keyword.control.loop.while.razor
      push: [razor_while_block, scope:source.cs#while_condition]
      with_prototype:
        - include: html

    # @lock block.
    - match: \B@(lock)\b
      scope: keyword.other.lock.razor
      captures:
        1: keyword.control.other.lock.razor
      push: [razor_expression_block, scope:source.cs#line_of_code]
      with_prototype:
        - include: html

  # Razor operators that work in an single-line fashion.
  inline_context:
    # Inline multi-token code.
    - match: '@\('
      scope: keyword.other.inline.begin.razor
      push:
        - meta_content_scope: source.cs.embedded.razor
        - match: '\)'
          scope: keyword.other.inline.end.razor
          pop: true
        - include: scope:source.cs#line_of_code_in
      with_prototype:
        - include: html

    # Inline await expression.
    - match: \B(@)(await)\s+\b
      captures:
        1: keyword.other.inline.razor
        2: keyword.control.other.cs
      push:
        - meta_content_scope: source.cs.embedded.razor
        - match: (?=[^{{name}}\.\(\)])
          pop: true
        - include: scope:source.cs#line_of_code_in

    # Inline expression.
    - match: '@(?!if|for|foreach|do|while|await)'
      scope: keyword.other.inline.razor
      push:
        - meta_content_scope: source.cs.embedded.razor
        - match: (?=[^{{name}}\.\(\)])
          pop: true
        - include: scope:source.cs#line_of_code_in

  # Special Razor code_block_in.
  # Ensures that we support HTML within the code block.
  razor_code_block_in:
    - include: razor_nested_code_block_in
    - match: \s*
    - match: (?=\S)
      push:
        - include: scope:source.cs#line_of_code
      with_prototype:
        - include: razor_nested_code_block_in

  # HTML context is activated by an HTML tag or by the @: operator.
  razor_nested_code_block_in:
    - include: html
    - match: '@:'
      scope: keyword.other.embed.html.razor
      push:
        - meta_scope: meta.embedded.html
        - include: main
        - match: \n
          pop: true

  # Modified to use customized code_block_in and to force opening brackets.
  razor_if_block:
    - match: \{
      scope: meta.block.razor keyword.other.if.razor punctuation.section.block.begin.razor
      set:
        - meta_content_scope: source.cs.embedded.razor meta.block.cs
        - match: \}
          scope: meta.block.razor keyword.other.if.razor punctuation.section.block.end.razor
          pop: true
        - include: razor_code_block_in
    - match: \S
      scope: invalid.illegal.expected.opening-bracket
      pop: true
  razor_switch_block:
    - match: \{
      scope: keyword.other.switch.razor punctuation.section.switch.begin.razor
      set:
        - meta_content_scope: source.cs.embedded.razor
        - match: \}
          scope: keyword.other.switch.razor punctuation.section.switch.end.razor
          pop: true
        - match: '\b(default)\s*(:)'
          captures:
            1: keyword.control.switch.case.cs
            2: punctuation.separator.case-statement.cs
        - match: '\b(case)\b'
          scope: keyword.control.switch.case.cs
          push:
            - include: scope:source.cs#literals
            - match: '({{name}}(\.))*{{name}}'
              captures:
                2: variable.other.namespace.cs
                3: punctuation.accessor.dot.cs
                4: constant.other.cs
            - match: (:)
              scope: punctuation.separator.case-statement.cs
              pop: true
            - match: $
              pop: true
        - include: razor_code_block_in
    - match: \S
      scope: invalid.illegal.expected.opening-bracket
      pop: true
  razor_for_block:
    - meta_scope: meta.block.loop.for.cs
    - match: \)
      scope: punctuation.definition.expression.loop.end.razor
      set:
      - match: \{
        scope: keyword.other.for.razor punctuation.section.loop.begin.razor
        set:
          - meta_content_scope: source.cs.embedded.razor meta.block.loop.cs
          - match: \}
            scope: keyword.other.for.razor punctuation.section.loop.end.razor
            pop: true
          - include: razor_code_block_in
      - match: \S
        scope: invalid.illegal.expected.opening-bracket
        pop: true
  razor_try_block:
    - match: \{
      scope: keyword.other.try.razor punctuation.section.trycatch.begin.razor
      set:
        - meta_content_scope: source.cs.embedded.razor
        - match: \}
          scope: keyword.other.try.razor punctuation.section.trycatch.end.razor
          pop: true
        - include: razor_code_block_in
    - match: (?=\S)
      set:
        - match: \s*$
          pop: true
        - include: razor_code_block_in
    - match: \S
      scope: invalid.illegal.expected.opening-bracket
      pop: true
  razor_catch_expr:
    - match: '(catch)\s*(\()'
      captures:
        1: keyword.control.trycatch.catch.cs
        2: punctuation.definition.expression.trycatch.catch.begin.cs
      push: [razor_catch_block, scope:source.cs#var_declaration_explicit]
    - match: 'catch'
      scope: keyword.control.trycatch.catch.cs
      push: razor_trycatch_block
    - match: (?=\S)
      pop: true
  razor_catch_block:
    - match: \)
      scope: punctuation.definition.expression.trycatch.catch.end.cs
      set: razor_trycatch_block
  razor_trycatch_block:
    - meta_scope: meta.block.trycatch.cs
    - match: \{
      scope: keyword.other.trycatch.razor punctuation.section.trycatch.begin.razor
      set:
        - meta_scope: meta.block.trycatch.cs
        - meta_content_scope: source.cs.embedded.razor
        - match: \}
          scope: keyword.other.trycatch.razor punctuation.section.trycatch.end.razor
          pop: true
        - include: razor_code_block_in
    - match: \S
      scope: invalid.illegal
      pop: true
  razor_finally_block:
    - meta_scope: meta.block.trycatch.cs
    - match: (finally)\b\s*
      scope: keyword.control.trycatch.finally.cs
      set: razor_trycatch_block
    - match: (?=\S)
      pop: true
  razor_using_block:
    - meta_scope: meta.group.cs
    - match: \)
      scope: meta.group.cs punctuation.section.group.end.cs
      set:
      - match: \{
        scope: keyword.other.using.razor punctuation.section.block.begin.razor
        set:
          - meta_content_scope: source.cs.embedded.razor meta.block.cs
          - match: \}
            scope: keyword.other.using.razor punctuation.section.block.end.razor
            pop: true
          - include: razor_code_block_in
      - match: \S
        scope: invalid.illegal.expected.opening-bracket
        pop: true
  razor_while_block:
    - meta_scope: meta.block.loop.while.cs
    - match: \{
      scope: keyword.other.while.razor punctuation.section.block.begin.razor
      set:
        - meta_content_scope: source.cs.embedded.razor meta.block.cs
        - match: '\}'
          scope: keyword.other.while.razor punctuation.section.block.end.razor
          pop: true
        - include: razor_code_block_in
    - match: \S
      scope: invalid.illegal.expected.opening-bracket
      pop: true
  razor_expression_block:
    - meta_content_scope: meta.group.cs
    - match: \)
      scope: meta.group.cs punctuation.section.group.end.cs
      set:
        - match: \{
          scope: meta.block.razor keyword.other.expression.razor punctuation.section.block.begin.razor
          set:
            - meta_content_scope: source.cs.embedded.razor meta.block.cs
            - match: \}
              scope: meta.block.razor keyword.other.expression.razor punctuation.section.block.end.razor
              pop: true
            - include: razor_code_block_in
        - match: (?=\S)
          pop: true
